version: '3.8'

services:
  # Sentiment Analysis API Service
  sentiment-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.sentiment
      target: production
    container_name: pwmk-sentiment-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - PWMK_LOG_LEVEL=INFO
      - PWMK_REGION=us-east-1
      - PWMK_CACHE_ENABLED=true
      - PWMK_MONITORING_ENABLED=true
      - PWMK_MODEL_CACHE_DIR=/app/models
      - PWMK_DATA_DIR=/app/data
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
    volumes:
      - sentiment_models:/app/models
      - sentiment_data:/app/data
      - sentiment_logs:/app/logs
      - /tmp/prometheus:/tmp/prometheus
    networks:
      - pwmk-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sentiment-api.rule=PathPrefix(`/api/sentiment`)"
      - "traefik.http.services.sentiment-api.loadbalancer.server.port=8000"

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: pwmk-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-sentiment_cache_pwd}
    command: redis-server --requirepass ${REDIS_PASSWORD:-sentiment_cache_pwd} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - pwmk-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL for storing compliance and audit data  
  postgres:
    image: postgres:15-alpine
    container_name: pwmk-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=pwmk_sentiment
      - POSTGRES_USER=${POSTGRES_USER:-pwmk}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_db_pwd}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - pwmk-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pwmk} -d pwmk_sentiment"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: pwmk-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - pwmk-network
    depends_on:
      - sentiment-api

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: pwmk-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - pwmk-network
    depends_on:
      - prometheus

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: pwmk-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - pwmk-network
    depends_on:
      - sentiment-api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for log aggregation (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: pwmk-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - pwmk-network
    profiles:
      - logging

  # Kibana for log visualization (optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: pwmk-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - pwmk-network
    depends_on:
      - elasticsearch
    profiles:
      - logging

  # Model server for serving ML models (optional)
  model-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.sentiment
      target: production
    container_name: pwmk-model-server
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - PWMK_SERVER_TYPE=model_server
      - PWMK_MODEL_CACHE_DIR=/app/models
    volumes:
      - sentiment_models:/app/models:ro
    networks:
      - pwmk-network
    command: ["python", "-m", "pwmk.sentiment.model_server", "--port", "8001"]
    profiles:
      - scaling
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # Worker service for background processing (optional)
  sentiment-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.sentiment
      target: production
    container_name: pwmk-sentiment-worker
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - PWMK_WORKER_CONCURRENCY=4
      - PWMK_QUEUE_URL=redis://redis:6379
      - PWMK_MODEL_CACHE_DIR=/app/models
    volumes:
      - sentiment_models:/app/models:ro
    networks:
      - pwmk-network
    depends_on:
      - redis
      - postgres
    command: ["python", "-m", "pwmk.sentiment.worker"]
    profiles:
      - scaling
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

volumes:
  sentiment_models:
    driver: local
  sentiment_data:
    driver: local
  sentiment_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  pwmk-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16