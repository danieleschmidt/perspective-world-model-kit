apiVersion: v1
kind: Namespace
metadata:
  name: pwmk-sentiment
  labels:
    name: pwmk-sentiment
    app: pwmk
    component: sentiment-analysis

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: sentiment-config
  namespace: pwmk-sentiment
data:
  ENVIRONMENT: "production"
  PWMK_LOG_LEVEL: "INFO"
  PWMK_REGION: "us-east-1"
  PWMK_CACHE_ENABLED: "true"
  PWMK_MONITORING_ENABLED: "true"
  PWMK_MODEL_CACHE_DIR: "/app/models"
  PWMK_DATA_DIR: "/app/data"
  PROMETHEUS_MULTIPROC_DIR: "/tmp/prometheus"
  
---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: sentiment-secrets
  namespace: pwmk-sentiment
type: Opaque
data:
  # Base64 encoded values
  POSTGRES_PASSWORD: c2VjdXJlX2RiX3B3ZA==  # secure_db_pwd
  REDIS_PASSWORD: c2VudGltZW50X2NhY2hlX3B3ZA==  # sentiment_cache_pwd
  JWT_SECRET: your-jwt-secret-base64-encoded
  
---
# Persistent Volume for model storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: sentiment-models-pv
  namespace: pwmk-sentiment
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: sentiment-models
  nfs:
    server: nfs-server.internal
    path: /data/pwmk/models
    
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sentiment-models-pvc
  namespace: pwmk-sentiment
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: sentiment-models

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: pwmk-sentiment
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sentiment-secrets
              key: REDIS_PASSWORD
        command:
          - redis-server
          - --requirepass
          - $(REDIS_PASSWORD)
          - --maxmemory
          - 512mb
          - --maxmemory-policy
          - allkeys-lru
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi" 
            cpu: "500m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: pwmk-sentiment
spec:
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
  type: ClusterIP

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: pwmk-sentiment
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "pwmk_sentiment"
        - name: POSTGRES_USER
          value: "pwmk"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sentiment-secrets
              key: POSTGRES_PASSWORD
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - pwmk
            - -d
            - pwmk_sentiment
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - pwmk
            - -d
            - pwmk_sentiment
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: pwmk-sentiment
spec:
  selector:
    app: postgres
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Sentiment Analysis API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sentiment-api
  namespace: pwmk-sentiment
  labels:
    app: sentiment-api
    component: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: sentiment-api
  template:
    metadata:
      labels:
        app: sentiment-api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: sentiment-api
        image: pwmk/sentiment:latest
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: sentiment-config
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sentiment-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sentiment-secrets
              key: REDIS_PASSWORD
        - name: DATABASE_URL
          value: "postgresql://pwmk:$(POSTGRES_PASSWORD)@postgres-service:5432/pwmk_sentiment"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 2
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: models-volume
          mountPath: /app/models
          readOnly: true
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        - name: prometheus-volume
          mountPath: /tmp/prometheus
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
      volumes:
      - name: models-volume
        persistentVolumeClaim:
          claimName: sentiment-models-pvc
      - name: data-volume
        emptyDir: {}
      - name: logs-volume
        emptyDir: {}
      - name: prometheus-volume
        emptyDir: {}
      securityContext:
        fsGroup: 1001

---
# Sentiment API Service
apiVersion: v1
kind: Service
metadata:
  name: sentiment-api-service
  namespace: pwmk-sentiment
  labels:
    app: sentiment-api
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: sentiment-api
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8000
    name: http
  type: ClusterIP

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sentiment-api-hpa
  namespace: pwmk-sentiment
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sentiment-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sentiment-api-ingress
  namespace: pwmk-sentiment
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - sentiment-api.your-domain.com
    secretName: sentiment-api-tls
  rules:
  - host: sentiment-api.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sentiment-api-service
            port:
              number: 80

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: sentiment-network-policy
  namespace: pwmk-sentiment
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: [] # Allow egress to external services (model downloads, etc.)
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sentiment-api-pdb
  namespace: pwmk-sentiment
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: sentiment-api

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: sentiment-api-monitor
  namespace: pwmk-sentiment
  labels:
    app: sentiment-api
spec:
  selector:
    matchLabels:
      app: sentiment-api
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s