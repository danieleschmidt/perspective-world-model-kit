[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "perspective-world-model-kit"
dynamic = ["version"]
description = "Neuro-symbolic world models with Theory of Mind for multi-agent AI systems"
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.9"
authors = [
    {name = "Your Organization", email = "pwmk@your-org.com"},
]
keywords = [
    "artificial-intelligence",
    "machine-learning", 
    "theory-of-mind",
    "multi-agent",
    "reinforcement-learning",
    "symbolic-reasoning",
    "neural-networks"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "torch>=2.0.0",
    "numpy>=1.21.0",
    "gymnasium>=0.29.0",
    "pettingzoo>=1.24.0",
    "networkx>=3.0",
    "matplotlib>=3.5.0",
    "tqdm>=4.64.0",
    "wandb>=0.15.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "jupyterlab>=4.0.0",
    "notebook>=7.0.0",
]
unity = [
    "mlagents>=0.30.0",
    "mlagents-envs>=0.30.0",
    "unity-gym>=0.1.0",
]
prolog = [
    "pyswip>=0.2.10",
    "clingo>=5.6.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.11.0",
    "hypothesis>=6.82.0",
]

[project.urls]
Homepage = "https://github.com/your-org/perspective-world-model-kit"
Documentation = "https://docs.your-org.com/pwmk"
Repository = "https://github.com/your-org/perspective-world-model-kit"
"Bug Tracker" = "https://github.com/your-org/perspective-world-model-kit/issues"
Changelog = "https://github.com/your-org/perspective-world-model-kit/releases"

[project.scripts]
pwmk = "pwmk.cli:main"

[tool.hatch.version]
path = "pwmk/__init__.py"

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/.pre-commit-config.yaml",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pwmk"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "gymnasium.*",
    "pettingzoo.*",
    "torch.*",
    "matplotlib.*",
    "wandb.*",
    "pyswip.*",
    "clingo.*",
    "mlagents.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=pwmk",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["pwmk"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # use `raise ... from err`
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]